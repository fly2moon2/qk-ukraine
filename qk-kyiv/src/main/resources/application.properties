quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=soulmate
quarkus.datasource.password=paperheart
#quarkus.datasource.username=jack
#quarkus.datasource.password=
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/paperdb

%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.username=username-default
%test.quarkus.datasource.password=
%test.quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost/mem:default
 
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.sql-load-script=import.sql

app.id=8086
app.name=paperdb
app.title=Paperwhite database
app.lang.default=en

msg.applog.tranid.notfound=Application log entry(tran id:{tranId}) not found 
msg.prefcode.notfound=Preference code({code}) not found
msg.pref.ofcode.notfound=Preference not found by code({code})
###
## port for this microservice
quarkus.http.port=8080
# Quarkus listen on port 8080 by default, when running tests it defaults to 8081. This allows you to run tests while having the application running in parallel.
# assign custom test port (0 for dynamic port)
quarkus.http.test-port=0
#quarkus.http.test-ssl-port=8446
#
# for connecting to api service(s)
#
#quarkus.rest-client."app.shadow.AppLogService".url=https://localhost:8081 
#quarkus.rest-client."app.shadow.AppLogService".scope=javax.inject.Singleton
#
# use configkey @RegisterRestClient(configKey="applogs-api") to shorten the full name
#app.shadow.AppLogService/mp-rest/url=https://localhost:8081 
#app.shadow.AppLogService/mp-rest/scope=javax.inject.Singleton
# url (port) here should point to the original/implementation of the service/not this proxy service
quarkus.rest-client.applogs-api.url=http://localhost:8081 
quarkus.rest-client.applogs-api.scope=javax.inject.Singleton
